# Generated by Django 5.1.3 on 2025-05-14 11:57

import datetime
import django.db.models.deletion
import django.utils.timezone
import tasks.models
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('accounts', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='MyFile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('original_file_name', models.TextField(verbose_name='Original File Name')),
                ('file_uuid', models.UUIDField(default=uuid.uuid4, unique=True, verbose_name='File UUID')),
                ('file_type', models.CharField(max_length=255, verbose_name='File Type')),
                ('upload_finished_at', models.DateTimeField(blank=True, default=None, null=True, verbose_name='File upload finished at')),
                ('url', models.URLField(blank=True, editable=False, null=True, verbose_name='File URL')),
            ],
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, verbose_name='Title')),
                ('internal_type', models.CharField(choices=[('Audio', 'Audio'), ('Video', 'Video'), ('Photo', 'Photo')], verbose_name='Type')),
                ('photo', models.ImageField(upload_to='Other/tasks-photos/', validators=[tasks.models.validate_photo_file_extension], verbose_name='Photo')),
                ('task_instruction', models.FileField(blank=True, default=None, null=True, upload_to='Other/tasks-instructions/', validators=[tasks.models.validate_pdf_file_extension], verbose_name='Task instruction')),
                ('reward', models.PositiveIntegerField(validators=[tasks.models.exempt_zero], verbose_name='Reward')),
                ('validation_reward', models.PositiveIntegerField(validators=[tasks.models.exempt_zero], verbose_name='Validation Reward')),
                ('description', models.TextField(verbose_name='Project description')),
                ('text', models.TextField(verbose_name='Task description')),
                ('audio_text', models.TextField(blank=True, default=None, null=True, verbose_name='Audio Text')),
                ('example', models.FileField(blank=True, default=None, null=True, upload_to='Other/file-examples/', validators=[tasks.models.validate_example_file_extension], verbose_name='Example File')),
                ('time_to_complete', models.DurationField(default=datetime.timedelta(seconds=300), verbose_name='Time To Complete')),
                ('limit_completions', models.IntegerField(default=100, verbose_name='Limit Of Completions')),
                ('limit_file_size', models.IntegerField(default=0, help_text='In MB', verbose_name='Limit File Size')),
                ('limit_video_length', models.DurationField(default=datetime.timedelta(seconds=300), verbose_name='Limit Video Length')),
                ('limit_audio_length', models.DurationField(default=datetime.timedelta(seconds=300), verbose_name='Limit Audio Length')),
                ('validation_percent', models.FloatField(default=0, verbose_name='Validation %')),
                ('validation_limit', models.IntegerField(default=3, help_text='Validation Limit for one completion', verbose_name='Validation Limit')),
                ('when_was_sent_to_validation', models.DateTimeField(blank=True, default=None, null=True, verbose_name='When was sent to validation')),
                ('start_time', models.DateTimeField(blank=True, default=None, help_text='Start time to postpone starting', null=True, verbose_name='Start Time')),
                ('task_paused', models.BooleanField(default=False, verbose_name='Task Paused?')),
                ('validation_paused', models.BooleanField(default=False, verbose_name='Validation Paused?')),
            ],
            options={
                'verbose_name': 'Task',
                'verbose_name_plural': 'Tasks',
            },
        ),
        migrations.CreateModel(
            name='Completion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('completion_date_and_time', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Completion Date')),
                ('status', models.CharField(choices=[('Hold', 'Hold'), ('In Review', 'In Review'), ('Accepted', 'Accepted'), ('Declined', 'Declined')], verbose_name='Status')),
                ('score', models.FloatField(default=0, verbose_name='Score')),
                ('sent_for_manual_validation', models.BooleanField(default=False, verbose_name='Sent for manual validation')),
                ('when_sent_for_validation', models.DateTimeField(blank=True, default=None, null=True, verbose_name='When sent for validation')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='accounts.user', verbose_name='User')),
                ('file', models.OneToOneField(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='tasks.myfile', verbose_name='File')),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tasks.task', verbose_name='Task')),
            ],
            options={
                'verbose_name': 'Completion',
                'verbose_name_plural': 'Completions',
            },
        ),
        migrations.CreateModel(
            name='CompletionForValidation',
            fields=[
            ],
            options={
                'verbose_name': 'Completion For Admin Validation',
                'verbose_name_plural': 'Completions For Admin Validation',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('tasks.completion',),
        ),
        migrations.CreateModel(
            name='RateRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.SmallIntegerField(default=0, verbose_name='Score')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Created at')),
                ('completion', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='completion_rate', to='tasks.completion', verbose_name='Completion')),
                ('validator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='accounts.user', verbose_name='Validator')),
            ],
        ),
    ]
